generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============== Models ===============

// =============== User Models ===============

model User {
  uuid              String              @id @default(uuid())
  name              String
  username          String              @unique
  email             String              @unique
  phone             String              @unique
  password          String
  role              Role                @default(USER)
  profile_pic       String?
  header_pic        String?
  bio               String?
  date_of_birth     DateTime            @default(now())
  verified_email    Boolean             @default(false)
  verified_phone    Boolean             @default(false)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  deleted_at        DateTime?
  settings          UserSettings?
  savedListings     Listing[]           @relation("SavedListings")
  listings          Listing[]           @relation("UserListings")
  listingComments   ListingComment[]
  listingsRatings   ListingRating[]
  listingReports    ListingReport[]
  UserSavedListings UserSavedListings[]
  chats             Chat[]              @relation("ChatUsers")
  Chat              Chat?               @relation(fields: [chatUuid], references: [uuid])
  chatUuid          String?
  Message           Message[]
  PlaceCreator      Place[]             @relation("PlaceCreator")
  PlaceOwner        Place[]             @relation("PlaceOwner")
  PlaceVisitors     PlaceVisitor[]      @relation("PlaceVisitors")
  PlaceReview       PlaceReview[]
  PlaceReport       PlaceReport[]
  PlaceReviewReply  PlaceReviewReply[]
}

model UserSettings {
  uuid                 String    @id @default(uuid())
  preferred_theme      String    @default("light")
  marketing_emails     Boolean   @default(true)
  in_app_notifications Boolean   @default(true)
  email_notifications  Boolean   @default(true)
  created_at           DateTime  @default(now())
  updated_at           DateTime  @updatedAt
  deleted_at           DateTime?
  user                 User      @relation(fields: [user_uuid], references: [uuid])
  user_uuid            String    @unique
}

model UserSavedListings {
  uuid         String    @id @default(uuid())
  created_at   DateTime  @default(now())
  deleted_at   DateTime?
  user         User      @relation(fields: [user_uuid], references: [uuid])
  user_uuid    String
  listing      Listing   @relation(fields: [listing_uuid], references: [uuid])
  listing_uuid String

  @@unique([user_uuid, listing_uuid])
}

// =============== Listing Models ===============

model Listing {
  uuid              String              @id @default(uuid())
  title             String
  description       String
  lat               Float?
  lng               Float?
  type              ListingType
  price             Float?
  state             State?
  rental            Int?
  negotiable        Boolean             @default(false)
  status            Status              @default(PUBLIC)
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  deleted_at        DateTime?
  user              User                @relation("UserListings", fields: [user_uuid], references: [uuid])
  user_uuid         String
  category          Category            @relation(fields: [category_uuid], references: [uuid])
  category_uuid     String
  images            ListingImage[]
  tags              ListingTag[]
  comments          ListingComment[]
  ratings           ListingRating[]
  reports           ListingReport[]
  Tag               Tag?                @relation(fields: [tagUuid], references: [uuid])
  tagUuid           String?
  savedBy           User[]              @relation("SavedListings")
  UserSavedListings UserSavedListings[]
}

model Category {
  uuid           String     @id @default(uuid())
  name           String
  created_at     DateTime   @default(now())
  updated_at     DateTime   @updatedAt
  deleted_at     DateTime?
  parent         Category?  @relation("SubCategories", fields: [parent_uuid], references: [uuid])
  parent_uuid    String?
  sub_categories Category[] @relation("SubCategories")
  listings       Listing[]
}

model ListingImage {
  uuid         String    @id @default(uuid())
  url          String
  alt          String?
  order        Int?
  status       Status    @default(PUBLIC)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?
  listing      Listing   @relation(fields: [listing_uuid], references: [uuid])
  listing_uuid String
}

model ListingTag {
  listing      Listing @relation(fields: [listing_uuid], references: [uuid])
  listing_uuid String
  tag          Tag     @relation(fields: [tag_uuid], references: [uuid])
  tag_uuid     String

  @@id([listing_uuid, tag_uuid])
}

model Tag {
  uuid       String       @id @default(uuid())
  name       String       @unique
  status     Status       @default(PUBLIC)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  deleted_at DateTime?
  listings   Listing[]
  ListingTag ListingTag[]
  PlaceTag   PlaceTag[]
}

model ListingComment {
  uuid         String    @id @default(uuid())
  content      String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?
  user         User      @relation(fields: [user_uuid], references: [uuid])
  user_uuid    String
  listing      Listing   @relation(fields: [listing_uuid], references: [uuid])
  listing_uuid String
}

model ListingRating {
  uuid         String    @id @default(uuid())
  rating       Int
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?
  user         User      @relation(fields: [user_uuid], references: [uuid])
  user_uuid    String
  listing      Listing   @relation(fields: [listing_uuid], references: [uuid])
  listing_uuid String

  @@unique([user_uuid, listing_uuid])
}

model ListingReport {
  uuid         String    @id @default(uuid())
  reason       String
  created_at   DateTime  @default(now())
  deleted_at   DateTime?
  user         User      @relation(fields: [user_uuid], references: [uuid])
  user_uuid    String
  listing      Listing   @relation(fields: [listing_uuid], references: [uuid])
  listing_uuid String
}

// =============== Places Models ===============

model Place {
  uuid         String         @id @default(uuid())
  name         String
  description  String
  categoryUuid String
  category     PlaceCategory  @relation(fields: [categoryUuid], references: [uuid])
  lat          Float
  lng          Float
  icon         String
  status       Status         @default(PUBLIC)
  creatorUuid  String
  creator      User           @relation(fields: [creatorUuid], references: [uuid], name: "PlaceCreator")
  ownerUuid    String?
  owner        User?          @relation(fields: [ownerUuid], references: [uuid], name: "PlaceOwner")
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  deleted_at   DateTime?
  services     PlaceService[]
  images       PlaceImage[]
  tags         PlaceTag[]
  reviews      PlaceReview[]
  reports      PlaceReport[]
  visitors     PlaceVisitor[] @relation("PlaceVisitors")

  @@unique([lat, lng])
}

model PlaceCategory {
  uuid           String          @id @default(uuid())
  name           String
  status         Status          @default(PUBLIC)
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  deleted_at     DateTime?
  parent         PlaceCategory?  @relation("SubCategories", fields: [parent_uuid], references: [uuid])
  parent_uuid    String?
  places         Place[]
  sub_categories PlaceCategory[] @relation("SubCategories")
}

model Service {
  uuid          String         @id @default(uuid())
  name          String
  icon          String
  color         String
  bg_color      String
  dark_color    String
  dark_bg_color String
  status        Status         @default(PUBLIC)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  deleted_at    DateTime?
  PlaceService  PlaceService[]
}

model PlaceService {
  uuid        String    @id @default(uuid())
  created_at  DateTime  @default(now())
  deleted_at  DateTime?
  place       Place     @relation(fields: [placeUuid], references: [uuid])
  placeUuid   String
  service     Service   @relation(fields: [serviceUuid], references: [uuid])
  serviceUuid String
}

model PlaceImage {
  uuid       String    @id @default(uuid())
  url        String
  alt        String?
  order      Int?
  status     Status    @default(PUBLIC)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  place      Place     @relation(fields: [placeUuid], references: [uuid])
  placeUuid  String
}

model PlaceTag {
  place     Place  @relation(fields: [placeUuid], references: [uuid])
  placeUuid String
  tag       Tag    @relation(fields: [tagUuid], references: [uuid])
  tagUuid   String

  @@id([placeUuid, tagUuid])
}

model PlaceVisitor {
  uuid       String    @id @default(uuid())
  created_at DateTime  @default(now())
  deleted_at DateTime?
  user       User      @relation("PlaceVisitors", fields: [userUuid], references: [uuid])
  userUuid   String
  place      Place     @relation("PlaceVisitors", fields: [placeUuid], references: [uuid])
  placeUuid  String

  @@unique([placeUuid, userUuid])
}

model PlaceReview {
  uuid             String             @id @default(uuid())
  rating           Int
  content          String?
  status           Status             @default(PUBLIC)
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  deleted_at       DateTime?
  user             User               @relation(fields: [userUuid], references: [uuid])
  userUuid         String
  place            Place              @relation(fields: [placeUuid], references: [uuid])
  placeUuid        String
  PlaceReviewReply PlaceReviewReply[]

  @@unique([placeUuid, userUuid])
}

model PlaceReviewReply {
  uuid       String      @id @default(uuid())
  content    String
  status     Status      @default(PUBLIC)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  deleted_at DateTime?
  user       User        @relation(fields: [userUuid], references: [uuid])
  userUuid   String
  review     PlaceReview @relation(fields: [reviewUuid], references: [uuid])
  reviewUuid String
}

model PlaceReport {
  uuid       String    @id @default(uuid())
  reason     String
  created_at DateTime  @default(now())
  deleted_at DateTime?
  user       User      @relation(fields: [userUuid], references: [uuid])
  userUuid   String
  place      Place     @relation(fields: [placeUuid], references: [uuid])
  placeUuid  String
}

// =============== Chat Models ===============

model Chat {
  uuid       String    @id @default(uuid())
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  users      User[]    @relation("ChatUsers")
  User       User[]
}

model Message {
  uuid       String    @id @default(uuid())
  content    String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  user       User      @relation(fields: [user_uuid], references: [uuid])
  user_uuid  String
}

// ========= History Models =========

// =============== Enums ===============

enum Role {
  USER
  MOD
  ADMIN
}

enum State {
  NEW
  LIKE_NEW
  USED
  REFURBISHED
}

enum Status {
  PUBLIC
  PRIVATE
  REMOVED
  DELETED
}

enum ListingType {
  PRODUCT
  SERVICE
}
